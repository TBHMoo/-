第五章，线程安全的容器类，和同步工具类

【同步容器】
同步容器类包括 Vector 和 Hashtable 
这些类实现线程安全的方式是 ： 将他们的状态封装起来， 并对每个共有方法都进行同步， 使得每次只有一个线程能够访问容器的状态。

同步容器类的问题
同步容器类都是线程安全的，但是在某些情况下（并发情况下）可能需要额外的 【客户端加锁】来保护【复合操作】。  (synchronized(Vector / Hashtable))

【并发容器】
通过使用并发容器，来替代同步容器。
同步容器将所有对容器状态的访问都串行化，以实现他们的线程安全性。 

BlockingQueue 扩展了Queue  ,增加了可阻塞的插入和获取等操作。（通过 RentrantLock 实现）， 如果队列为空，那么获取元素的操作将一直阻塞，知道队列中出现
一个可用的元素。 如果有队列已满（对于有界队列来说），那么插入操作将一直阻塞，直到队列中出现可用的空间。

【ConcurrentHashMap】
a、同步容器类在执行每个操作期间都持有一个锁。（因此容器内的方法就不能互相调用，否则出现死锁）

b、ConcurrentHashMap 相对 同步容器，使用了更细粒度的锁机制，分段锁， 来实现更大程度的共享。

【CopyOnWriteArrayList】 用于替代同步 List
创建局部变量，来操作。操作完了，之后，再写回原数组。  复制原容器的时候开销比较大，适合读多写少的情况。

【阻塞队列和 生产者-消费者模式】
有界的阻塞队列，在构建高可用的应用程序时,是一种强大的资源管理工具：  它们能够抑制并防止产生过多的工作项， 使应用程序在符合过载的情况下变得更加健壮。
