第5章
关于B-tree 索引的限制
1、如果不是按照索引的最左列开始查找， 则无法使用索引。
2、不能跳过索引中的列
3、如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查询。 

这三个限制，说明，innodb 上的索引列的顺序很重要。 在优化性能时，可能需要使用相同的列，但是顺序不同的索引来满足不同类型的查询需求。
也有些限制并不是B-tree 本身导致，而是MySQL优化器 和存储引擎使用索引的方式导致的，这部分限制在未来的版本中，可能就不再是限制了。 

特大型的表，建立和使用索引的代价将会随之增长。 通常使用分区技术！


高性能的索引策略
1。独立的列， 索引列不能是表达式的一部分，也不能是函数的参数
2、索引很长的字符列，会让索引变得大而慢。---前缀索引。 同时考虑前缀的选择性
3、多列索引，从查询语句的使用频率，和索引列的数据选择性上，一起综合考虑。 查询使用频率最高，和数据选择性最好。 这两个条件看具体情况，测试得出结论

多列索引的索引列顺序问题
经验法则，件选择性最高的列，放在索引最前面。  这个经验并没有那么重要，在考虑排序和分组的情况下的时候，就不管用了 也应该结合使用查询语句的使用频率。

最后，选择性和基数的经验法则，通常有用， 同时也别忘了  where子句中 的排序，分组，和范围条件的其他因素。 也可能对查询性能造成巨大影响。

聚簇索引
聚簇索引并不是一种单独的索引类型，而是一种数据存储方式 。 InnoDB的聚簇索引实际上是在同一个结构中同时保存了B-Tree索引和数据行。

并不是所有的存储引擎，都支持聚簇索引，主要关注Innodb
Innodb 通过主键聚集数据，如果没有定义主键， innodb 会选择一个唯一的非空索引代替。如果没有这样的索引，innodb会隐式定义一个主键来作为聚簇索引。

聚集数据的优点
1.相关数据保存在一起。 初步理解就是，对于相近的索引行，存储在同一页中。
2、数据访问快，因为聚簇索引将索引和数据保存在同一个B-Tree中
3、使用覆盖索引扫描的查询，可以直接使用页节点中的主键值 。  索引是按页过滤。 

缺点
1. 聚簇数据最大限度地提高了I/O密集型应用的性能，但如果数据都放在内存中，则访问的数据不那么重要了。
2、插入数据，严重依赖插入顺序。  这就是mysql 中需要 一个 AUTO_INCREMENT 的id 的原因。
3、更新聚簇索引列，的代价非常高。 所以我们都不会去更新记录中的id 值。这会导致，innodb对整个聚簇索引，重排顺序。
4、因为聚簇索引，的数据结构原因，在插入一个新的行，或者主键更新时，有可能会触发。 “页分裂” 问题，本来一个页中有序的数据，强行被插入了一行，导致变成了连个
页。占用了更多的磁盘空间
5、聚簇索引，在数据行稀疏的情况下的全表扫描比较慢，所以我们都是用 AUTO_INCREMENT 的ID来作为主键。这样就密集了
6、








