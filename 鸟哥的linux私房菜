第十二章 ，学习 Shell Scripts

shell script 注意事项

1、如果读取到一个   Enter 符号（CR）,就尝试开始执行该行，或该串命令
2、[\Enter]来换行
3、# 注释

执行Shell的方式


shell.sh 必须要有 可读与可执行 (rx) 的权限

1、直接指令下达，  绝对路径，相对路径，或者 变量【PATH】 指定的目录中。

./shell.sh
/home/shell.sh
2、bash 程序来执行   
bash shell.sh
sh shell.sh



hello world shell

mkdir bing; cd bin

vim hello.sh

#!/bin/bash  指定 script 使用的 shell 名称
PAHT=/bin:/sbin:/usr/bin:/usr/sbin:~/bin

export PATH
echo -e "Hello world!\a \n"
exit 0

chmod a+x hello.sh;./hello.sh
或者
chmod a+x hello.sh;sh hello.sh
执行

编写script 的工具最好使用 vim  而不是 vi .因为 vim 会有额外的语法检验机制



简单shell script 练习

一个输入的 shell  
mkdir xx;cd xx
vim showname.sh
#!/bin/bash
read -p "please input your firstname:" firstname
read -p "please input your lastname:" lastname

echo -e "your full name is :${firstname} ${lastname}"

：wq
chmod a+x showname.sh
./showname.sh

建立空文件
touch "${filename}"

数值运算
var=$(运算内容)
例子  var=$(($(firstnu)*$(secnu)))

有小数点的计算   bc
echo "123.123*55.9" | bc回车
6882.575


script的执行方式差异
利用直接执行的方式来执行的script ,当子程序完成后，在子程序内的各项变量或者动作将会结束而不会传回到父程序中。  局部变量概念

利用source 来执行脚本，在父程序中执行 ，脚本中定义的变量，依然存在。 全局变量概念

判断表达式
test -e /xx && echo "exist" || echo "Not exist"
检查/xx  是否存在，存在的话输出 exist ,不存在的话 输出 Not exist

某个文件名 文件类型判断
-e 是测试一个东西存在不存在， 常用
-f 该文件名，是否存在切为file 常用
-d 该文件名是否存在，且为目录 directory 常用

文件权限判断
-r 是否有可读权限，
-w 可写
-x 可执行
-s 存在且为  非空白文件

两个文件之间的比较  test file1 -nt file2
-nt  file1比file2新-ot  老
-ef  同

两个整数之间的判断 test n1 -eq n2
-eq  两数值相等
-ne  两数值不相等
-gt  n1比n2大
-lt  小
-ge  大于等于
-le  小于等于


判断字符串的数据
test -z string 字符串是否为0 
test -n string  字符串是否为 非0test str1 == str2 ，判断 str1是否等于str2 ,相等返回true
test str1 != str2 ， 判断str1是否不等于 str2,相等返回false

多重条件判断  test -r filename -a -x filename
-a  and-o  or

!  反

小练习，一个输入文件名，
判断文件存在不存在区分文件类型（文件或者目录）
用户所拥有这个文件的权限有哪些

#!/bin/bash
echo -e "Please input a filename ,i will check the filename's type and permission.\n\n"
read -p "input a filename : " filename
test -z ${filename} && echo "you must input a filename." && exit 0

test ! -e ${filename} && echo "The filename '${filename}' DO NOT exist" && exit 0
test -f ${filename} && filetype="regulare file"
test -d ${filename} && filetype="direcroty"
test -r ${filename} && perm="readable"
test -w ${filename} && perm="${perm} writeable"
test -x ${filename} && perm="${perm} executable"

echo "The filename: ${filename} is a ${filetype}"
echo "AND the permissions for you are : ${perm}"
                                                    

判断符号[]，中括号的两端，需要有【空格符】来分隔
test 之外，还可以用[]
[ -z "${HOME}" ]; echo $?

注意：
1、中括号[] 内，每个组件，都需要有空格键来分隔
2、在中括号内的变数，最好都以双引号 括号起来
3、在中括号内的常数，最好都以单，或双括号括号起来



小程序，判断输入值是 y或者n, 输出不同提示，不是 y或者n  输出不认识输入的什么东东

#!/bin/bash
read -p "Please input (Y/N):" yn
[ "${yn}" == "Y" -o "${yn}" == "y" ] && echo "OK continue" && exit 0
[ "${yn}" == "N" -o "${yn}" == "n" ] && echo "Oh, interrupt!" && exit 0
echo "I don't know what your choice is" && exit 0


                                                  

shell  默认参数 
/path/shell.sh  opt1  opt2  opt3 
${0}            ${1}   ${2}  ${3}
$# 表示参数个数，这里是3
$@ 表示所有参数，这里是 “opt1  opt2 opt3”
shift  1  表示参数左移一个， 既剩下opt2 opt3

条件判断  if [];then
          fi
          
vim helle.sh
#!/bin/bash
if [ "${1}" == "hello" ]; then
    echo "Hello ,how are you"
elif [ "${1}" == "" ]; then
    echo "You MUST input parameters, ex> {${0} someword}"
else 
    echo "The only parameter is 'hello' , ex> {${0} hello}"
fi



case 条件判断
case ${1} in
  "hello")
          echo "Hello ,how are you ?"
          ;;
  "")
          echo "You MUST input parameters, ex> {${0} someword}"
          ;;
  *)
          echo "Usage ${0} {hello}"
          ;;
          
          
 利用function 功能
 
 function f(){
    balabala
 }
 
 f  one
     ${1}
 
 因为 shell script 的执行方式是由上而下，从左到右 ，因此在 shell script 当中的 function 需要在程序的最前面。 先定义后使用
 
 循环 loop
 
 
 #!/bin/bash
 while [ "${yn}" != "yes" -o "${yn}" != "YES" ]
 do
        read -p "Please input yes/YES to stop : " yn
 done
 echo "OK !"
 
 
for... do...done 固定循环
for var in con1 con2 con3 ...
do 
    balabala
done

#!/bin/bash
for animal in dog cat elephant
do
    echo "There are ${animal}s..."
done

for sitenu in ${seq 1 100}  #  {1..100}
do
    balabala
done


sh -x hello.sh  
可以把执行过程都打印出来， 用来调试shell .













 
 
 
 
          








