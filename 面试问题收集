六度人和

基本的项目架构是什么样子的，然后解决过什么样的问题。

1、 java concurrent 包中的内容  以及怎么保证线程池安全关闭。 
shutdown 等待所有线程一起关闭，队列中等待执行的线程，和已经执行的线程执行完毕。 任务队列不接受新的任务线程
shutdownNow 立即关闭线程池，不接受新的线程，向执行中的线程请求中断，任务队列中等待线程，不启动。
问的应该是上面两个命令的区别 。 我回答的是，线程中等待栅栏的概念


2、 redis  中的基础数据结构，以及怎么从 list中拿到 1-100 的内容的命令是什么 
尴尬了，
String
string 是redis最基本的类型， 一个key ,一个value
一个键最大 512M

> Set name "XXXX"
> get name 

Hash
redis  hash 是一个键值对集合。
是一个string 类型的field 和 value 的映射表，适合用于存储对象
每个hash  可以存储 2^32-1 个键值对

> HMSET user:1 username redis.net.cn password redis.net.cn points 200
> HGETALL user:1
1) "username"
2) "redis.net.cn"
3) "password"
4) "redis.net.cn"
5) "points"
6) "200"


List
Redis 列表是简单的字符串列表，按照插入顺序排序。 你可以添加一个元素导列表的头部（左边）或者尾部（右边）
> lpush key reids
(interger) 1
> lpush key mongodb
(interger) 2
> lpush key rabitmq
(interger) 3
> lrange key 0 10
1) "rabitmq"
2) "mongodb"
3) "redis"

Set
redis set是string 类型的无序集合
集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)
集合中最大的成员数也是 2^32-1

 sadd 命令
 
> sadd key redis
(interger) 1
> sadd key rabitmq
(interger) 1
> sadd key rabitmq
(interger) 0

> smembers key
1) "rabitmq"
2) "redis"

zset 有序集合
zset 和 set 一样也是string 类型元素的集合，且不允许重复的成员
不同的是，每个元素都会关联一个double类型的分数。 redis 正是通过分数来为集合中的成员进行从小到大的排序。
zset 成员是唯一的，但是分数（score）却可以重复

zadd 命令
zadd key score member
  
>zadd key 0 redis
(interger) 1
> zadd key 0 mongodb
(interger) 1
> zadd key 0 rabitmq
(interger) 1
> zadd key 0 rabitmq
(interger) 0
> zrangebyscore key 0 1000
1) "redis"
2) "mongodb"
3) "rabitmq"

Hr 关心综合素质，学习能力，性格，业余生活。
技术面， 反向面试 。 照实说就行
CTO  从业务角度上描述上一家公司的系统。 然后问觉得遇到的最大的挑战，这里没有准备好。

铱云科技
笔试题
java 框架中的集合最优实现是什么？并说明原因？
 Collection, Map -----
 (Vector),ArrayList  ,LinkedList, (HashTable),HashMap,ConcurrentHashMap.
 Vector 线程安全，但是慢，已过时。
 ArrayList 线程安全，快。 作为Vector的替代。 如果需要线程安全，可以用工具类Collections 添加线程安全特性。
 Collections.synchronizedList(new ArrayList());
 HashTable 和 HashMap 的区别。
 HashTable 线程安全，慢。 HashMap 线程不安全。快。推荐使用HashMap .线程安全可以通过Collections 实现。
 HashMap 中允许key 或者value 为 null,  HashTable 中不允许。
 


blockingQueue 的最佳实现是什么。
  LinkedBlockingQueue和 ArrayBlockingQueue 是 FIFO队列。 
  PriorityBlockingQueue是一个优先队列。 
 最后一个实现BlockingQueue是 SynchronousQueue 实际上它不是一个真正的队列，因为它不会为队列中的元素维护存储空间。 于其他队列不同的是，它维护一组线程
 这些线程在等待着把元素加入或者移出队列。


threadLocal 的作用是什么？ 什么场景下使用ThreadLocal
 ThreadLocak 主要用于通过线程封闭，来防止，单实例可变变量的访问和全局可变变量访问。
 一个经典场景是，用ThreadLocal  来获取JDBC Connection. 因为Connection 本身不是线程安全的。

cookie 和 session 的作用和区别。 tomcat 中的  session 管理怎么实现的


AutomicInterger 是阻塞的吗？ jdk 中的实现是什么 
CAS 实现 ，不阻塞

lamda 表达式的作用？
简洁的可传递的匿名函数的一种方式，lamda只是让匿名函数可读性更强，写得更轻松。
(x,y)-> x+y;

concurrentHashMap 中解决链表过长的方式
  resize 数组，增加数组长度，来降低拉链过长的影响。

 Lock 和 synchronized 的区别。

synchronized 是悲观的锁策略，Lock （ReentrantLock） 是乐观的锁策略。
Lock  基于 CAS 实现。
基本语法上，ReentrantLock 和 synchronized 很相似，都具备线程重入特性。 
1.5之前 ReentrantLock 比 synchronized  性能好很多， 1.6  synchronized 加了很多优化，性能没什么差别。
官方也更支持 synchronized  因为 ReentrantLock 必须显式的释放。
ReentrantLock 比 synchronized 增加的高级功能
1、 等待可中断：当持有锁的线程长期不释放锁时，正在等待的线程可以选择放弃等待，处理其他事情。它对执行时间非常长的同步块非常有用。
而在等待由Synchronized产生的互斥锁时，会一直阻塞，是不能被中断的
2、 ReentrantLock 可实现公平锁： 多个线程等待同一个锁时，必须按照申请锁的时间排序等待，然而非公平锁不保证锁在释放时，不保证等待线程获得锁的顺序。
ReentrantLock  默认也是非公平锁，但是可以在声明时通过构造方法 ReentrantLock (true) 来实现公平锁

3、ReentrantLock 锁和条件的关系 可以一对多。 synchronized 锁和条件的关系是一对一。 


 秒杀系统，
 
 缓存系统
 
 脱离数据库实现ID。 单数据库，应用集群。
 
 为什么要用Spring  ioc  aop 
 ioc 主要是是把对象和对象之间的依赖关系，抽离了出来。放到了配置文件中 。解耦。 使得代码容易测试
 aop 主要是把业务分离出来， 比如日志处理。多条业务线，都需要日志。有了AOP 就可以在多条业务线上统一加上日志处理的逻辑。
 
 
 spring 事务传播性 主要是为了解决什么问题。
 为了解决事务一致性
 

宽拓科技。
对java 工程框架的了解程度不够， 算法基础还可以，但是深入了解算法面崩了。 
问了个最长公共子序列问题，的状态转移方程是什么。
c[i][j] = 0 , ( i=0 or j = 0 )
        = c[i-1][j-1] + 1 ,( a[i]==b[j] )
        = max(c[i-1][j], c[i][j-1]), (a[i]!= b[j])



请写出一个线程安全的单例类A

内部类来做到延迟加载对象  effectiveJava 第一章

public class Singleton{
     private static class  SingletonHolder{
          private final static Singleton instance = new Singleton();
     }
     
     public static Singleton getInstance(){
          return SingletonHolder.instance;
     }
}

请写出下列程序的输出结果


public class MyThread extends Thread{
    public void run(){
        System.out.println("test");
    }

    public static void main(String[] args) {
        Thread t = new MyThread();
        t.start();
        System.out.println("main");
        try {
            t.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("main2");
    }
}

输出结果是 main  test main2
1、线程的start() 方法，和run() 方法的区别 。  start() 方法会开启一个线程去执行，run()方法中的内容。  直接调用run() 方法，就是串行执行任务。
2。线程的join() 方法。 在这里的main 方法中执行的话的意思就是 ，主线程等 t线程执行完，再执行后续的片段。 
join（1小时） 方法的通俗解释就是 ，你去买东西，我在路上等你，你早来，我早走，你不来，我等了1小时之后走的意思。 如果不设置时间或者时间是0，
代表你不来，我不走。

以下这段代码有什么问题吗？ 如果有，是什么
public class staticMethod {
    public static void test(int i){}

    public static void main(String[] args) {
        Integer a ;
        test(a);
    }
}

编译时报错， a变量未初始化。
1。 Integer 初始状态为null. int 初始状态为 0


下面这段代码有问题吗？ 如果有，是什么
public class A{
  public A(int i) {

}
}

public class B extends A{

  public B(int i) {

}
}

1/两个类不能放到同一个java 文件中. 两个都是public . 
2.A类没有默认构造方法

给定一个字符串，如何转成整型

private Integer toInteger(String str){
        Integer sum = 0;
        try {
             sum = Integer.parseInt(str);
             // sum  = Integer.valueOf(str);
        }catch (NumberFormatException e){
            System.out.println(e);
        }
        return sum;
    }
    
    使用 Integer.parseInt() 或者 Integer.valueOf();
    
    
使用数组实现栈。
需要实现的方法有 
pop() 弹出栈顶元素。
push(E e) 入栈
peek() 读取栈顶元素
IsEmpty() 判断栈是否为空
IsFull() 判断栈是否满

1、首先需要考虑栈的初始化， 以及栈元素超出栈大小时候的扩容。
2、更新栈的操作，需要同步。

public class Stack<E> {
  private Object[] stack;
  private int index ;
  private final static int INIT_SIZE = 2;
  
  /*
  * 初始化栈,无参，有参
  */

 public Stack(){
     stack = new Object[INIT_SIZE];
     index = -1;
 }
 
 public Stack(int init_size){
     stack = new Object[init_size];
     index = -1;
 }
 
 /*
 * push 方法,修改了栈，需要同步,需要考虑栈是否满了
 */
 public synchronized void push(E object){
   if(isFull()){
      Object[] temp = stack;
      stack  = new Ojbect[stack.length * 2];
      System.arraycopy(temp,0,stack,0,temp.length);
   }
   stack[++index] = object;
 }
 
 /*pop 方法，弹出栈顶元素，修改了栈，需要同步，需要考虑栈是否空了*/
 public synchronized E pop(){
   if(isEmpty()){
      return null;
   }
   
   E temp = peek();
   stack[index--] = null;
   return temp;
 }
 
 /*peek 方法，返回栈顶元素*/
 public E peek(){
   if(!isEmpty()){
       return stack[index] ;
 }
 return null;
 }
 
 
 /*判断栈是否满了*/
 public boolean isFull(){
     return index >= stack.length-1;
 }
 /*判断栈是否空了*/
 public boolean isEmpty(){
    return index == -1;
 }
 
}


米筐电话面 ，技术总监面试思路，先看基础，再看2年java 应该到的一个程度。
泛型的意义是什么， 常用的设计模式。 工厂模式，观察者模式。

轻鱼科技，上来先让讲做过的内容，可能是想看看表达能力，沟通能力。
上面提出一点疑问，然后拿出一张纸，类似笔试题目，但是可能是直接现场口述的形式。 

题目
java 基础
1、ArrayList, HashMap, ConcurrentHashMap 描述
2、排序算法，跳过。作为1的低级要求
3、两个有序链表，如何合成一个有序链表。 （应该是想问 插入排序，或者朴素的排序，取A或B的小的元素，放到新的链表中）

sql 
数据库中 explain 是指什么？ 有什么用途。 
用于查看执行计划。 看是否和预期索引一致。 然后追问了影响索引的条件有什么 ， （ like  ,or ,in, order , group by ）

索引的选择
第一列， 数据选择性。使用频率，和上线前的对比。

sql 注入，
#{} ， ${} ${}中的内容可以是任意值

分库分表的方案。

jvm ,gc. 薄弱点。

说是面过了，需要跟hr 谈一下薪资 报了12-14 .  2个小时内给回复。








