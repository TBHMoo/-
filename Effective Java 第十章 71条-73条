1、延迟初始化 ，是延迟到需要域的值时才将它初始化的这种行为。 如果永远不需要这个值，这个域就永远都不会被初始化。
2、对于延迟初始化，最好建议“除非绝对必要，否者就不要这么做”。 延迟初始化就像一把双刃剑，它降低了初始化类或者创建实例的开销，却增加了访问被
延迟初始化的域的开销。
3、对【静态域】使用延迟初始化，使用lazy initialization holder class 模式
这种模式保证了类要被用到的时候才会被初始化，
//Lazy initialization holder class idiom for static fields
private static class FieldHolder{
    static final FieldType field = computeFieldValue();
}

static FieldType getField(){ return FiledHolder.field; }

当 getField方法第一次被调用时，它第一次读取FieldHolder.field, 导致FieldHolder类得到初始化。

4、对于性能的考虑，需要对【实例域】使用延迟初始化，就使用双重检查模式 (double-check idiom)

总结，大多数域的初始化，都应该正常的初始化，而不是延迟初始化。 
必须使用延迟初始化时， 对于实例域， 就使用双重检查模式； 对于静态域，就使用懒加载模式； 对于可以接受重复初始化的 实例域 ，也可以考虑使用单重检查模式。


双重检查模式？ 
单重检查模式？


73条，用线程池，而不是使用线程组
